name: 🚀 Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      version:
        description: '버전 태그 (예: v1.0.0)'
        required: false
        default: 'latest'

jobs:
  build-windows:
    name: 🪟 Windows 빌드
    runs-on: windows-latest

    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 📦 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller psutil

      - name: 🔨 Windows 실행파일 빌드
        run: |
          python build_executable.py
        env:
          PYTHONIOENCODING: utf-8

      - name: 📊 빌드 결과 확인
                 run: |
           echo "=== Build Results ==="
           dir dist
           if (Test-Path "dist/KeywordGenerator.exe") {
             $fileSize = (Get-Item "dist/KeywordGenerator.exe").Length / 1MB
             echo "✅ KeywordGenerator.exe created successfully ($([math]::Round($fileSize, 1)) MB)"
           } else {
             echo "❌ Executable build failed"
             exit 1
           }
        shell: powershell

      - name: 📁 아티팩트 업로드
        uses: actions/upload-artifact@v3
        with:
          name: windows-executable
          path: |
            dist/
            INSTALLATION_GUIDE.md
          retention-days: 30

  build-macos:
    name: 🍎 macOS 빌드
    runs-on: macos-latest

    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 📦 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller psutil

      - name: 🔨 macOS 실행파일 빌드
        run: |
          python build_executable.py
        env:
          PYTHONIOENCODING: utf-8

      - name: 📊 빌드 결과 확인
                 run: |
           echo "=== Build Results ==="
           ls -la dist/
           if [ -d "dist/KeywordGenerator.app" ]; then
             appSize=$(du -sh "dist/KeywordGenerator.app" | cut -f1)
             echo "✅ KeywordGenerator.app created successfully ($appSize)"
           else
             echo "❌ App bundle build failed"
             exit 1
           fi

      - name: 📁 아티팩트 업로드
        uses: actions/upload-artifact@v3
        with:
          name: macos-executable
          path: |
            dist/
            INSTALLATION_GUIDE.md
          retention-days: 30

  create-release:
    name: 📦 릴리즈 생성
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 📁 Windows 아티팩트 다운로드
        uses: actions/download-artifact@v3
        with:
          name: windows-executable
          path: windows-build/

      - name: 📁 macOS 아티팩트 다운로드
        uses: actions/download-artifact@v3
        with:
          name: macos-executable
          path: macos-build/

      - name: 📦 배포 패키지 생성
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          DATE=$(date +%Y%m%d)

                     # Windows package
           mkdir -p release/keyword_generator_windows_${VERSION}
           cp windows-build/dist/KeywordGenerator.exe release/keyword_generator_windows_${VERSION}/
           cp INSTALLATION_GUIDE.md release/keyword_generator_windows_${VERSION}/
           cp -r src/resources release/keyword_generator_windows_${VERSION}/sample_files/ 2>/dev/null || echo "No sample files"

           # macOS package  
           mkdir -p release/keyword_generator_macos_${VERSION}
           cp -r macos-build/dist/KeywordGenerator.app release/keyword_generator_macos_${VERSION}/
           cp INSTALLATION_GUIDE.md release/keyword_generator_macos_${VERSION}/
           cp -r src/resources release/keyword_generator_macos_${VERSION}/sample_files/ 2>/dev/null || echo "No sample files"

           # ZIP compression
           cd release
           zip -r keyword_generator_windows_${VERSION}.zip keyword_generator_windows_${VERSION}/
           zip -r keyword_generator_macos_${VERSION}.zip keyword_generator_macos_${VERSION}/

          echo "✅ 배포 패키지 생성 완료"
          ls -la *.zip

      - name: 🚀 GitHub Release 생성
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*.zip
                   name: 'Keyword Generator ${{ github.ref_name }}'
         body: |
           ## 🎉 Keyword Generator ${{ github.ref_name }} Release

           ### 📦 Download
           - **Windows Users**: `keyword_generator_windows_${{ github.ref_name }}.zip`
           - **macOS Users**: `keyword_generator_macos_${{ github.ref_name }}.zip`

           ### ✨ Key Features
           - 🔥 Excel file-based keyword combination generation
           - 🌐 Browser-based user interface
           - 📊 Real-time statistics and preview
           - 📁 Group-based Excel sheet output
           - 🔄 Support for various file sizes

           ### 🚀 How to Use
           1. Download and extract ZIP file
           2. Double-click executable file
           3. Upload Excel file in browser
           4. Generate keyword combinations and download

           ### 📋 System Requirements
           - **Windows**: Windows 10 or later
           - **macOS**: macOS 10.14 or later

           📖 For detailed usage, see `INSTALLATION_GUIDE.md`
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notification:
    name: 📢 빌드 완료 알림
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📊 빌드 결과 요약
                 run: |
           echo "=== 🚀 Cross-Platform Build Complete ==="
           echo "Windows Build: ${{ needs.build-windows.result }}"
           echo "macOS Build: ${{ needs.build-macos.result }}"

           if [[ "${{ needs.build-windows.result }}" == "success" && "${{ needs.build-macos.result }}" == "success" ]]; then
             echo "✅ All platform builds successful!"
             echo "📁 Executables available for download in Actions tab"
           else
             echo "❌ Some builds failed"
             exit 1
           fi
